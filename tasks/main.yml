---
########################################################################
# these vars are defined in inventories as they should be common acrossing
# host/group, they should not be reset by 'Load defaults' below
########################################################################
- name: Setup override_existing_user
  set_fact:
    override_existing_user: "{{override_existing_user|default('false')}}"

- name: Setup set_tcpwrapper
  set_fact:
    set_tcpwrapper: "{{set_tcpwrapper|default('false')}}"

- name: Setup set_uid
  set_fact:
    set_uid: "{{set_uid|default('false')}}"
########################################################################

- name: Load defaults
  # load default for a clean slate for each iteration
  include_vars:
    file: '{{role_path}}/defaults/main.yml'

- name: Load user's metadata from file
  include_vars:
    file: "{{user_meta}}"

- name: Initialized create_user to false
  set_fact:
    create_user: false

# use shadow database to avoid number name user misinterpreted as uid
- name: Check if user exists
  getent:
    database: shadow
    key: "{{username}}"
    fail_key: false

- name: Set user_create true if override_existing_user is true or user not exists
  set_fact: 
    create_user: true
  when: override_existing_user or (getent_shadow|string|search("None"))

- name: Load user's grp file
  include_vars:
    file: "{{user_grps}}"
  when: create_user and user_grps is defined

- name: Creating groups
  group: name="{{item.group}}" gid="{{item.gid | default(omit)}}"
  with_items: "{{groups_to_create}}"
  when: create_user

- name: User group creation
  group: name="{{username}}"
         gid="{{gid | default(uid) | default(omit)}}"
  when: create_user and (group is not defined or group == username) and create_user_group

- name: User creation
  user:
    name: "{{username}}"
    group: "{{group | default(username if create_user_group else user_group)}}"
    # empty string removes user from all secondary groups
    groups: "{{usergroups | join(',') if usergroups else ''}}"
    shell: "{{shell if shell is defined else default_shell}}"
    password: "{{password if password is defined else '!*!'}}"
    comment: "{{comment if comment is defined else ''}}"
    expires: "{{expiry | default(omit)}}"
    uid: "{{uid if set_uid and uid else omit}}"
    home: "{{home | default('/home/' + username)}}"
    createhome: "{{'yes' if user_create_homedirs else 'no'}}"
    generate_ssh_key: "{{ generate_ssh_key | default(omit) }}"
    update_password: "{{update_password | default(omit)}}"
  when: create_user

- name: SSH keys from files
  authorized_key:
    user: "{{username}}"
    key: "{{lookup('file', item)}}"
    path: "{{ home | default('/home/' + username) }}/.ssh/authorized_keys"
  with_items: "{{ssh_key_files}}"
  when: create_user and ssh_key_files is defined

- name: Setup sudo_user conf 
  template:
    src: sudo.j2
    dest: "/etc/sudoers.d/10_{{username}}"
    mode: 0440
    owner: root
    group: root
    validate: 'visudo -cf %s'
  when: create_user and sudo_user 
  tags: sudo

- name: Setup sudo_user_nopasswd conf
  template:
    src: sudo_nopasswd.j2
    dest: "/etc/sudoers.d/10_{{username}}"
    mode: 0440
    owner: root
    group: root
    validate: 'visudo -cf %s'
  when: create_user and sudo_user_nopasswd
  tags: sudo

- name: Setup sudo_user_custom
  copy:
    src: "{{sudo_user_custom}}"
    dest: "/etc/sudoers.d/10_{{username}}"
    mode: 0440
    owner: root
    group: root
    validate: 'visudo -cf %s'
  when: create_user and sudo_user_custom
  tags: sudo

- name: Add IP to /etc/hosts
  lineinfile:
    dest: /etc/hosts
    line: "{{ item.ip }}\t{{ item.host }}"
  with_items: "{{workstations}}"
  when: create_user and workstations

- name: Add IP to hosts.allow sshd service
  include_role:
    name: tcpwrapper
  vars:
    ip: "{{ item.host }}"
    service: 'sshd'
  with_items: "{{workstations}}"
  when: ansible_distribution_version|int > 5 and create_user and set_tcpwrapper and workstations
  tags: tcpwrapper
