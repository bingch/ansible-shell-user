---

#############################################################################
# user adding 
#############################################################################
- name: set local vars
  set_fact:
    tmp_all_users: []
    tmp_users_list: "{{ users_list }}"
    tmp_set_uid: "{{ set_uid }}"

- name: get current user list
  block:
    - name: fetch current user
      getent:
        database: shadow # for number user
      register: getent_result
    - name: set current user list
      set_fact:
        new_users_list: []
        exist_users: "{{ getent_result.ansible_facts.getent_shadow | list }}"
    - name: get new users list
      set_fact:
        new_users_list: "{{ new_users_list }} + [ '{{ item }}' ]" 
      when: item | basename | replace('.yml', '') not in exist_users
      with_items: "{{ tmp_users_list }}"
    - name: set back tmp_users_list
      set_fact: 
        tmp_users_list: "{{ new_users_list }}"
  when: not override_existing_user

- name: load user's yml
  include_vars:
    file: "{{ item }}"
    name: tmpuser
  with_items:
    - "{{ tmp_users_list }}"
  register: tmp_users

- name: set tmp_all_users list dict
  set_fact:
    tmp_all_users: "{{ tmp_users.results | map(attribute='ansible_facts.tmpuser') | list }}"

- name: groups_to_create
  group: 
    name: "{{ item.1.name }}"
    gid:  "{{ item.1.gid | default(omit) }}"
  with_subelements:
    - "{{ tmp_all_users }}"
    - groups_to_create
    - skip_missing: yes

- name: user group creation
  group: 
    name: "{{ item.group }}"
    gid:  "{{ item.gid | default(omit) }}"
  when: item.group is defined and not item.username | regex_search('^[1-9]')
  with_items: "{{ tmp_all_users }}"

- name: User creation
  user:
    name: "{{ item.username }}"
    group: "{{ item.group | default(omit) }}"
    # empty string removes user from all secondary groups
    groups: "{{ item.usergroups | join(',') if item.usergroups is defined
                 else omit }}"
    shell: "{{ item.shell if item.shell is defined else default_shell }}"
    password: "{{ item.password if item.password is defined else 
              lookup('file', item.password_file) if item.password_file is 
              defined else default_pass }}"
    comment: "{{ item.comment if item.comment is defined else '' }}"
    expires: "{{ item.expiry | default(omit)}}"
    uid: "{{ item.uid if tmp_set_uid and item.uid is defined else omit }}"
    home: "{{ item.home | default('/home/' + item.username) }}"
    move_home: yes
    createhome: "{{ 'no' if item.not_create_home is defined else 'yes' }}"
    generate_ssh_key: "{{ item.generate_ssh_key | default(omit) }}"
    update_password: "{{ item.update_password | default(omit) }}"
    #local: yes
  with_items: "{{ tmp_all_users }}"

- name: Find out home owned by root due to user del without rm home
  stat:
    path: "{{item.home | default('/home/' + item.username) }}"
  with_items: "{{ tmp_all_users }}"
  register: tmp_homes

- name: Change home ownership
  file:
    path: "{{ item.item.home | default('/home/' + item.item.username) }}"
    owner: '{{ item.item.uid if item.item.uid is defined and set_uid else item.item.username }}'
    group: "{{ item.item.group | default(item.item.username if not 
     item.item.username | regex_search('^[1-9]') else default_user_group) }}"
    mode: '0700'
  when: item.stat.exists and (item.stat.mode == '0000' or item.stat.uid == 0)
  with_items: "{{ tmp_homes.results }}"

- name: SSH keys from files
  authorized_key:
    user: "{{ item.0.username }}"
    key: "{{ lookup('file', item.1) }}"
    path: "{{ item.0.home | default('/home/' + 
          item.0.username) }}/.ssh/authorized_keys"
  with_subelements:
    - "{{ tmp_all_users }}"
    - ssh_key_files
    - skip_missing: yes

- name: Setup sudo_user conf 
  template:
    src: sudo.j2
    dest: "/etc/sudoers.d/10_{{ item.username }}"
    mode: 0440
    owner: root
    group: root
    validate: 'visudo -cf %s'
  when: item.sudo_user is defined and item.sudo_user 
  with_items: "{{ tmp_all_users }}"

- name: Setup sudo_user_nopasswd conf
  template:
    src: sudo_nopasswd.j2
    dest: "/etc/sudoers.d/10_{{ item.username }}"
    mode: 0440
    owner: root
    group: root
    validate: 'visudo -cf %s'
  when: item.sudo_user_nopasswd is defined and item.sudo_user_nopasswd 
  with_items: "{{ tmp_all_users }}"

- name: Setup sudo_user_custom
  copy:
    src: "{{ item.sudo_user_custom }}"
    dest: "/etc/sudoers.d/10_{{ item.username }}"
    mode: 0440
    owner: root
    group: root
    validate: 'visudo -cf %s'
  when: item.sudo_user_custom is defined and item.sudo_user_custom
  with_items: "{{ tmp_all_users }}"

- name: Setup /etc/hosts
  lineinfile:
    dest: /etc/hosts
    line: "{{ item.1.ip }}\t{{ item.1.host }}"
  with_subelements:
    - "{{ tmp_all_users }}"
    - workstations
    - skip_missing: true

- name: Set up /etc/hosts.allow
  block:
    - name: Init host list
      set_fact:
        tmp_host: []
    - name: Fill host/ip list
      set_fact:
        tmp_host: "{{ tmp_host }} + [ '{{ item.1.host }}' ] "
      with_subelements:
        - "{{ tmp_all_users }}"
        - workstations
        - skip_missing: yes
    - name: Add user's /etc/hosts.allow entry
      include_role:
        name: tcpwrapper
      vars:
        service: 'sshd'
        state: present
        host_list: "{{ tmp_host }}"
      when: tmp_host | length > 0
  when: set_tcpwrapper 
